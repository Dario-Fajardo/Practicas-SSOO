#!./ptbash

TRACE_ID=$(uuidgen) # Generamos un ID único para cada traza
PROGRAM="" # Variable que almacena el programa a trazar
PROGRAM_ARGS="" #Variable que almacena los argumentos del programa a trazar
STRACE_ARGS="0" # Variable que confirma si se han introducido argumentos para strace
STRACE_ARG_LIST="" # Variable que almacena los argumentos de strace
ATTACH="" # Variable que confirma si se ha introducido la opción -nattch
PATTCH="" # Variable que confirma si se ha introducido la opción -pattch
TRACER_PID="" # Variable que almacena el PID del proceso que hace la traza
TRACEE_PID="" # Variable que almacena el PID del proceso que es trazado
KILL_TRACES="" # Variable que confirma si se ha introducido la opción -k
ATTACH_PROGRAM="" # Variable que almacena el nombre del programa a trazar con -nattch
PATTCH_PID="" # Variable que almacena el PID del programa a trazar con -pattch
STRACE_ERROR="" # Variable que almacena el error de strace
LISTA_PROCESOS="" # Variable que almacena la lista de procesos del usuario
STOP="" # Variable que confirma si se ha introducido la opción -S
STOP_ARGS="" # Variable que almacena los argumentos de la opción -S
OPTION_G="" # Variable que confirma si se ha introducido la opción -g
OPTION_GE="" # Variable que confirma si se ha introducido la opción -ge 
OPTION_GC="" # Variable que confirma si se ha introducido la opción -gc
RESUME_PIDS="" # Variable que almacena los PIDs de los procesos a reanudar
TABLE_INFO="" # Variable que almacena la información de la tabla de -ge y -gc
TABLE_LINE="" # Variable que almacena una línea de la tabla de -ge y -gc
TABLE="" # Variable que almacena la tabla de -ge y -gc
INV="" # Variable que confirma si se ha introducido la opción -inv para invertir la tabla de -ge y -gc

#################### Funciones ####################

# Función que muestra el uso normal del programa
usage() {
  echo "scdebug [-h] [-sto arg] [-k] [prog [arg …] ] [-nattch progtoattach …] [-pattch pid1 … ]
--help o -h para más información"
}

# Función que comprueba los argumentos del programa
arg_check() {
  while [ -n "$1" ]; do
    case "$1" in
      -sto )
        STRACE_ARGS="1"
        ;;
      -nattch )
        for i in $@; do
          if [ "$i" = "-S" ] || [ "$i" = "-g" ] || [ "$i" = "-ge" ] || [ "$i" = "-gc" ]; then
            echo "No se puede usar alguna de las opciones introducidas con -nattch"
            usage
            exit 6
          fi
        done
        ATTACH="1"
        PATTCH=""
        ;;
      -pattch )
        for i in $@; do
          if [ "$i" = "-S" ] || [ "$i" = "-g" ] || [ "$i" = "-ge" ] || [ "$i" = "-gc" ]; then
            echo "No se puede usar alguna de las opciones introducidas con -pattch"
            usage
            exit 6
          fi
        done
        PATTCH="1"
        ATTACH=""
        ;;
      -k)
        KILL_TRACES="1"
        kill_traces 2> /dev/null
        sleep 0.2
        exit 0
        ;;
      -S)
        for i in $@; do
          if [ "$i" = "-nattch" ] || [ "$i" = "-pattch" ] || [ "$i" = "-g" ] || [ "$i" = "-ge" ] || [ "$i" = "-gc" ]; then
            echo "No se puede usar -S con alguna de las opciones introducidas"
            echo "scdebug [-h] [-k] -S commName prog [arg...]"
            exit 6
          fi
        done
        STOP="1"
        ;;
      -inv)
        INV="1"
        ;;
      -g)
        for i in $@; do
          if [ "$i" = "-nattch" ] || [ "$i" = "-pattch" ] || [ "$i" = "-S" ] || [ "$i" = "-ge" ] || [ "$i" = "-gc" ]; then
            echo "No se puede usar -g con alguna de las opciones introducidas"
            echo "scdebug [-h] [-k] -g | -gc | -ge [-inv]"
            exit 6
          fi
        done
        OPTION_G="1"
        ;;
      -ge)
        for i in $@; do
          if [ "$i" = "-nattch" ] || [ "$i" = "-pattch" ] || [ "$i" = "-S" ] || [ "$i" = "-g" ] || [ "$i" = "-gc" ]; then
            echo "No se puede usar -ge con alguna de las opciones introducidas"
            echo "scdebug [-h] [-k] -g | -gc | -ge [-inv]"
            exit 6
          fi
        done
        OPTION_GE="1"
        ;;
      -gc)
        for i in $@; do
          if [ "$i" = "-nattch" ] || [ "$i" = "-pattch" ] || [ "$i" = "-S" ] || [ "$i" = "-g" ] || [ "$i" = "-ge" ]; then
            echo "No se puede usar -gc con alguna de las opciones introducidas"
            echo "scdebug [-h] [-k] -g | -gc | -ge [-inv]"
            exit 6
          fi
        done
        OPTION_GC="1"
        ;;
      --help )
        help
        exit 0
        ;;
      -h )
        help
        exit 0
        ;;
      -* )
        if [ "$STRACE_ARGS" = "1" ] && [ -z $PROGRAM ]; then
          STRACE_ARG_LIST+="$1 "
        else 
          if [ -n "$PROGRAM" ]; then
            PROGRAM_ARGS+=" $1"
          else 
            echo "Argumento $1 no válido"
            usage
            exit 1           
          fi
        fi
        ;;
      * )
        if [ -n "$STOP" ]; then
          STOP_ARGS+=" $1"
        fi
        if [ -n "$PATTCH" ]; then
          if [ -z "$STOP" ]; then 
            PATTCH_PID="$1" 
            pattch_option& 2> /dev/null # Llamamos a la función que hace la traza con attach
          fi
        fi
        if [ -n "$ATTACH" ]; then
          if [ -z "$STOP" ]; then
            ATTACH_PROGRAM="$1"  
            nattch_option& 2> /dev/null # Llamamos a la función que hace la traza con attach
          fi
        fi
        if [ -n "$PROGRAM" ]; then
          PROGRAM_ARGS+=" $1"
        else
          PROGRAM="$1"
        fi
        ;;
    esac
    shift
  done
}

# Función que muestra la ayuda del programa
help() {
  echo "Este programa permite hacer la traza de las llamadas al sistema de cierto proceso
  pasado por línea de comandos, esta traza se guarda en un archivo y se envía a la carpeta
  ~/.scdebug/[comando introducido]/
  
  -sto [args]: se envían argumentos al comando strace que se ocupa de la traza

  -k: se matan todos los procesos de traza que estén corriendo junto con los trazados
  
  -nattch [command ... ]: se hace strace con attach a el último proceso de cada uno de los que se pasen por argumento

  -pattch [PID ...]: se hace strace con attach a cada uno de los PID pasados por argumento

  Existen mas modos de uso, si se incluye la opción -S se podrá dejar un proceos detenido
  y en una segunda ejecución del script con las opciones -g, -ge o -gc reanudarlos y
  monitorizarlos, -g muestra los procesos reanudados en un archivo, -ge muestra los
  procesos reanudados en una tabla ordenada por el número de errores y -gc muestra los
  procesos reanudados en una tabla ordenada por el número de llamadas al sistema
  
  -S prog[args...]: se crea un proceso con nombre traced_prog que se detiene"
}

# Función que mata todos los procesos de traza que estén corriendo junto con los trazados
kill_traces() {
  for i in $(ps -u $USER --no-header | sort -r | tr -s " " | cut -d " " -f 2); do
    if [ "$(cat 2> /dev/null /proc/$i/status | grep "TracerPid" | cut -f 2)" != "0" ]; then
      kill 2> /dev/null -9 $(cat /proc/$i/status | grep "TracerPid" | cut -f 2)
      kill 2> /dev/null -9 $i
    fi
  done
}

# Función que hace la traza con attach al proceso más reciente con cierto nombre
nattch_option () {
  PID=$(pgrep -n "$ATTACH_PROGRAM")
  if [ -z $PID ]; then
    echo "No hay ningún proceso abierto con el nombre $ATTACH_PROGRAM"
    exit 2
  fi
  echo "Programa a monitorizar: $ATTACH_PROGRAM"
  OUTPUT_FILE="$HOME/.scdebug/$ATTACH_PROGRAM/trace_$TRACE_ID.txt"
  OUTPUT_DIR="$HOME/.scdebug/$ATTACH_PROGRAM"
  mkdir 2> /dev/null -p $OUTPUT_DIR 
  (strace 2>&1 $STRACE_ARG_LIST -p $PID -o $OUTPUT_FILE) || STRACE_ERROR="$?"
  if [ -n "$STRACE_ERROR" ]; then
    echo "No se pudo monitorizar el programa $ATTACH_PROGRAM, strace falló con el error $STRACE_ERROR" | tee 2>/dev/null -a $OUTPUT_FILE
    exit 4
  fi
}

# Función que hace la traza con attach para un PID
pattch_option() {
  PATTCH_PROGRAM="$(ps -p $PATTCH_PID --no-header | tr -s " " | cut -d " " -f 5)"
  if [ -z $PATTCH_PROGRAM ]; then
    echo "No hay ningún proceso abierto con el PID $PATTCH_PID"
    exit 2
  fi
  echo "Programa a monitorizar: $PATTCH_PROGRAM"
  OUTPUT_FILE="$HOME/.scdebug/$PATTCH_PROGRAM/trace_$TRACE_ID.txt"
  OUTPUT_DIR="$HOME/.scdebug/$PATTCH_PROGRAM"
  mkdir 2>/dev/null -p $OUTPUT_DIR 
  (strace 2> /dev/null $STRACE_ARG_LIST -p $PATTCH_PID -o $OUTPUT_FILE) || STRACE_ERROR="$?"
  if [ -n "$STRACE_ERROR" ]; then
    echo "No se pudo monitorizar el programa con el PID $PATTCH_PID, strace falló con el error $STRACE_ERROR" | tee 2>/dev/null -a $OUTPUT_FILE
    exit 4
  fi
}

# Función que hace la traza normal de un programa
normal_strace() {
  OUTPUT_FILE="$HOME/.scdebug/$PROGRAM/trace_$TRACE_ID.txt"
  OUTPUT_DIR="$HOME/.scdebug/$PROGRAM"
  mkdir 2> /dev/null -p $OUTPUT_DIR 
  strace 2>&1 $STRACE_ARG_LIST -o $OUTPUT_FILE $PROGRAM $PROGRAM_ARGS || STRACE_ERROR="$?"
  echo "PID del programa: $(pgrep -n $PROGRAM)"
  if [ -n "$STRACE_ERROR" ]; then
    echo strace error: $STRACE_ERROR
    echo "No se pudo monitorizar el programa $PROGRAM, strace falló con el error $STRACE_ERROR" | tee 2>/dev/null -a $OUTPUT_FILE
    exit 4
  fi
  exit 0
}

# Función que muestra una tabla con los procesos del usuario y sus trazadores si es que los tiene
tracer_and_tracee_pid() {
  sleep 0.1
  LISTA_PROCESOS="$(ps -u $USER --no-header | sort -r | tr -s " " | cut -d " " -f 2)"
  Tabla_procesos=""
  for i in $LISTA_PROCESOS; do
    NOMBRE=$(ps 2>/dev/null -p $i --no-header | tr -s " " | cut -d " " -f 5)
    if [ -n "$NOMBRE" ]; then
      TRACER_PID=$(cat 2>/dev/null /proc/$i/status | grep "TracerPid" | cut -f 2)
      TracerID=$(ps 2>/dev/null -p $TRACER_PID --no-header | tr -s " " | cut -d " " -f 5)
      if [ "$TRACER_PID" = "0" ]; then
        TracerID="N/A"
        TRACER_PID="N/A"
      fi
      Linea_tabla="$NOMBRE $i $TRACER_PID $TracerID"
      Tabla_procesos+="$Linea_tabla
"
    fi
  done
  echo "========================================================="
  echo "$Tabla_procesos" | sort -k 2 -nr | column -t --table-column Nombre,PID,TracerPID,TracerID
  echo "========================================================="
}
 
# Función que detiene el proceso que hace la traza (-S)
stop() {
  echo -n "traced_$PROGRAM" > /proc/$$/comm
  kill -SIGSTOP $$
  LaunchProg="$PROGRAM $PROGRAM_ARGS"
  exec $LaunchProg
}

# Función que reanuda un proceso y lo monitoriza (-g)
resume_strace_g() {
  TRACE_ID=$(uuidgen)
  mkdir -p "$HOME/.scdebug/$(ps -p $1 -o comm= | cut -d "_" -f 2)"
  strace -p $1 -o "$HOME/.scdebug/$(ps -p $1 -o comm= | cut -d "_" -f 2)/trace_$TRACE_ID.txt"&
  sleep 0.2
  kill -SIGCONT $1
  echo "Proceso $1 reanudado y monitorizado"
}

# Función que reanuda un proceso y lo monitoriza, luego resume los datos en una tabla (-ge y -gc)
resume_strace_ge_gc() {
  TABLE_INFO=$(strace -p $1 -c -U name,max-time,total-time,calls,errors 2>&1 & sleep 1 && kill -SIGCONT $1)
  max_time_proccess="$(echo -n "$TABLE_INFO" | awk '{print $2,$1}' | sort -nr |  grep "0,0" | grep -v total | head -n 1 | awk '{print $2}')"
  max_time="$(echo -n "$TABLE_INFO" | awk '{print $2,$1}' | sort -nr |  grep "0,0" | head -n 2 | tail -n 1 | awk '{print $1}')"
  total_time="$(echo -n "$TABLE_INFO" | grep "total" | awk '{print $3}')"
  calls="$(echo -n "$TABLE_INFO" | grep "total" | awk '{print $4}')"
  errors="$(echo -n "$TABLE_INFO" | grep "total" | awk '{print $5}')"
  TABLE_LINE="$max_time_proccess $max_time $total_time $calls $errors
"
}

#################### Main ####################
arg_check "$@" # Llamamos a la función que comprueba las opciones del script

if [ "$?" != "0" ]; then # Vemos que nada haya fallado en la comprobación de argumentos
  exit $?
fi

if [ -n "$STOP" ]; then # Si se ha introducido la opción -S
  stop
  exit $?
fi

if [ -n "$OPTION_G" ]; then # Si se ha introducido la opción -g
  RESUME_PIDS=$(ps | grep traced_ | tr -s " " | cut -d " " -f 2)
  if [ -z "$RESUME_PIDS" ]; then
    echo "No hay ningún proceso monitorizado"
    exit 2
  fi
  for pid in $RESUME_PIDS; do
    resume_strace_g "$pid"&
  done
  sleep 1
  exit $?
fi

if [ -n "$OPTION_GE" ]; then # Si se ha introducido la opción -ge
  RESUME_PIDS=$(ps | grep traced_ | tr -s " " | cut -d " " -f 2)
  if [ -z "$RESUME_PIDS" ]; then
    echo "No hay ningún proceso monitorizado"
    exit 2
  fi
  for pid in $RESUME_PIDS; do
    resume_strace_ge_gc "$pid"
    TABLE+="$TABLE_LINE"
    sleep 0.1
  done
  sleep 1
  echo "========================================================="
  if [ -n "$INV" ]; then
    echo "$TABLE" | sort -k 5 -n | column -t --table-column Max_Time_Proccess,Max_Time,Total_Time,Calls,Errors
  else 
    echo "$TABLE" | sort -k 5 -nr | column -t --table-column Max_Time_Proccess,Max_Time,Total_Time,Calls,Errors
  fi
  echo
  exit $?
fi

if [ -n "$OPTION_GC" ]; then # Si se ha introducido la opción -gc
  RESUME_PIDS=$(ps | grep traced_ | tr -s " " | cut -d " " -f 2)
  if [ -z "$RESUME_PIDS" ]; then
    echo "No hay ningún proceso monitorizado"
    exit 2
  fi
  for pid in $RESUME_PIDS; do
    resume_strace_ge_gc "$pid"
    TABLE+="$TABLE_LINE"
    sleep 0.1
  done
  sleep 1
  echo "========================================================="
  if [ -n "$INV" ]; then
    echo "$TABLE" | sort -k 4 -n | column -t --table-column Max_Time_Proccess,Max_Time,Total_Time,Calls,Errors
  else 
    echo "$TABLE" | sort -k 4 -nr | column -t --table-column Max_Time_Proccess,Max_Time,Total_Time,Calls,Errors
  fi
  echo
  exit $?
fi

if [ -n "$ATTACH" ] || [ -n "$PATTCH" ]; then # Si se ha introducido la opción -nattch o -pattch
  if [ -n "$ATTACH" ]; then
    if [ -z "$ATTACH_PROGRAM" ]; then
      echo "No se ha introducido ningún programa"
      usage
      exit 2
    fi
  fi
  if [ -n "$PATTCH" ]; then 
    if [ -z $PATTCH_PID ]; then
      echo "No se ha introducido ningún PID"
      usage
      exit 2
    fi
  fi
  sleep 0.1
  tracer_and_tracee_pid
  exit 0
else # Si no se ha introducido ninguna opción que cambie el comportamiento del programa
  if [ -z "$PROGRAM" ]; then # Si no se ha introducido ningún programa da error
    echo "No se ha introducido ningún programa"
    usage
    exit 3
  fi
  normal_strace&
  tracer_and_tracee_pid
fi